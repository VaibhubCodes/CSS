This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-06-14T15:00:43.548Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
migrations/
  0001_initial.py
templates/
  plans/
    checkout.html
    subscription_plans.html
admin.py
apps.py
models.py
serializers.py
tests.py
urls.py
views.py

================================================================
Repository Files
================================================================

================
File: migrations/0001_initial.py
================
# Generated by Django 5.1.3 on 2025-06-14 14:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "plan",
                    models.CharField(
                        choices=[
                            ("basic", "Basic - 5GB"),
                            ("premium", "Premium - 20GB"),
                            ("enterprise", "Enterprise - 50GB"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("active", "Active"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("razorpay_order_id", models.CharField(max_length=100)),
                (
                    "razorpay_payment_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "razorpay_signature",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("valid_till", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Subscription",
                "verbose_name_plural": "Subscriptions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="INR", max_length=3)),
                ("status", models.CharField(max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "subscription",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.subscription",
                    ),
                ),
            ],
        ),
    ]

================
File: templates/plans/checkout.html
================
<!DOCTYPE html>
<html>
<head>
    <title>Checkout</title>
    <style>
        .checkout-container {
            max-width: 400px;
            margin: 40px auto;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            text-align: center;
        }

        .payment-details {
            background-color: #f8f9fa;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }

        .payment-button {
            background-color: #2563eb;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #eee;
        }
    </style>
</head>
<body>
    <div class="checkout-container">
        <h2>Complete Your Payment</h2>
        
        <div class="payment-details">
            <div class="detail-row">
                <span>Plan Type:</span>
                <span>{{ plan_type|title }}</span>
            </div>
            <div class="detail-row">
                <span>Amount:</span>
                <span>â‚¹{{ amount|divisibleby:100 }}</span>
            </div>
            <div class="detail-row">
                <span>Email:</span>
                <span>{{ user_email }}</span>
            </div>
        </div>

        <button id="pay-button" class="payment-button">Pay Now</button>
    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        var options = {
            "key": "{{ razorpay_key }}",
            "amount": "{{ amount }}",
            "currency": "{{ currency }}",
            "name": "File Management System",
            "description": "{{ plan_type|title }} Plan Subscription",
            "order_id": "{{ order_id }}",
            "handler": function (response) {
                document.getElementById('pay-button').disabled = true;
                fetch("{{ callback_url }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(response)
                })
                .then(response => response.json())
                .then(data => {
                    if(data.status === 'success') {
                        window.location.href = "/payment-success/";
                    } else {
                        // alert("Payment failed. Please try again.");
                        document.getElementById('pay-button').disabled = false;
                    }
                });
            },
            "prefill": {
                "email": "{{ user_email }}"
            },
            "theme": {
                "color": "#2563eb"
            }
        };

        document.getElementById('pay-button').onclick = function() {
            var rzp1 = new Razorpay(options);
            rzp1.open();
        };
    </script>
</body>
</html>

================
File: templates/plans/subscription_plans.html
================
<!DOCTYPE html>
<html>
<head>
    <title>Subscription Plans</title>
    <style>
        .plan-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            padding: 20px;
        }

        .plan-card {
            width: 300px;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }

        .plan-title {
            font-size: 24px;
            color: #333;
            margin-bottom: 10px;
        }

        .plan-price {
            font-size: 32px;
            color: #2563eb;
            margin: 15px 0;
        }

        .storage-limit {
            font-size: 18px;
            color: #666;
            margin-bottom: 15px;
        }

        .subscribe-button {
            background-color: #2563eb;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
        }

        .features-list {
            list-style: none;
            padding: 0;
            margin: 15px 0;
            text-align: left;
        }

        .features-list li {
            padding: 5px 0;
            color: #555;
        }
    </style>
</head>
<body>
    <h1 style="text-align: center;">Choose Your Plan</h1>
    
    <div class="plan-container">
        <div class="plan-card">
            <div class="plan-title">Basic Plan</div>
            <div class="plan-price">â‚¹499</div>
            <div class="storage-limit">5GB Storage</div>
            <ul class="features-list">
                <li>âœ“ Basic Support</li>
                <li>âœ“ Standard Processing</li>
                <li>âœ“ Limited Features</li>
            </ul>
            <a href="{% url 'create_subscription' 'basic' %}" class="subscribe-button">Subscribe Now</a>
        </div>

        <div class="plan-card">
            <div class="plan-title">Premium Plan</div>
            <div class="plan-price">â‚¹999</div>
            <div class="storage-limit">20GB Storage</div>
            <ul class="features-list">
                <li>âœ“ Priority Support</li>
                <li>âœ“ Fast Processing</li>
                <li>âœ“ Advanced Features</li>
            </ul>
            <a href="{% url 'create_subscription' 'premium' %}" class="subscribe-button">Subscribe Now</a>
        </div>

        <div class="plan-card">
            <div class="plan-title">Enterprise Plan</div>
            <div class="plan-price">â‚¹1999</div>
            <div class="storage-limit">50GB Storage</div>
            <ul class="features-list">
                <li>âœ“ 24/7 Support</li>
                <li>âœ“ Fastest Processing</li>
                <li>âœ“ All Features</li>
            </ul>
            <a href="{% url 'create_subscription' 'enterprise' %}" class="subscribe-button">Subscribe Now</a>
        </div>
    </div>
</body>
</html>

================
File: admin.py
================
# payments/admin.py

from django.contrib import admin
from .models import Subscription, PaymentTransaction

class PaymentTransactionInline(admin.TabularInline):
    model = PaymentTransaction
    extra = 0
    readonly_fields = ('amount', 'currency', 'status', 'created_at')
    can_delete = False
    
    def has_add_permission(self, request, obj=None):
        return False

@admin.register(Subscription)
class SubscriptionAdmin(admin.ModelAdmin):
    list_display = ('user', 'plan', 'status', 'created_at', 'valid_till')
    list_filter = ('plan', 'status')
    search_fields = ('user__email', 'razorpay_order_id')
    readonly_fields = ('razorpay_order_id', 'razorpay_payment_id', 'razorpay_signature', 'created_at')
    inlines = [PaymentTransactionInline]

@admin.register(PaymentTransaction)
class PaymentTransactionAdmin(admin.ModelAdmin):
    list_display = ('subscription', 'amount', 'currency', 'status', 'created_at')
    list_filter = ('status', 'currency')
    search_fields = ('subscription__user__email',)

================
File: apps.py
================
from django.apps import AppConfig


class PaymentsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'payments'

================
File: models.py
================
from django.db import models
from django.conf import settings

class Subscription(models.Model):
    PLAN_CHOICES = (
        ('basic', 'Basic - 5GB'),
        ('premium', 'Premium - 20GB'),
        ('enterprise', 'Enterprise - 50GB'),
    )
    
    STATUS_CHOICES = (
        ('pending', 'Pending'),
        ('active', 'Active'),
        ('cancelled', 'Cancelled'),
        ('expired', 'Expired'),
    )

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    plan = models.CharField(max_length=20, choices=PLAN_CHOICES)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    razorpay_order_id = models.CharField(max_length=100)
    razorpay_payment_id = models.CharField(max_length=100, blank=True, null=True)
    razorpay_signature = models.CharField(max_length=200, blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    valid_till = models.DateTimeField(null=True, blank=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'Subscription'
        verbose_name_plural = 'Subscriptions'

    def __str__(self):
        return f"{self.user.email} - {self.plan} Plan"

class PaymentTransaction(models.Model):
    subscription = models.ForeignKey(Subscription, on_delete=models.CASCADE)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(max_length=3, default='INR')
    status = models.CharField(max_length=20)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.subscription.user.email} - {self.amount} {self.currency}"

================
File: serializers.py
================
from rest_framework import serializers
from .models import Subscription, PaymentTransaction

class SubscriptionPlanSerializer(serializers.Serializer):
    plan_type = serializers.ChoiceField(choices=Subscription.PLAN_CHOICES)
    name = serializers.SerializerMethodField()
    price = serializers.SerializerMethodField()
    storage = serializers.SerializerMethodField()
    features = serializers.SerializerMethodField()

    def get_name(self, obj):
        return dict(Subscription.PLAN_CHOICES)[obj['plan_type']]

    def get_price(self, obj):
        prices = {
            'basic': 499,
            'premium': 999,
            'enterprise': 1999
        }
        return prices.get(obj['plan_type'])

    def get_storage(self, obj):
        storage = {
            'basic': '5GB',
            'premium': '20GB',
            'enterprise': '50GB'
        }
        return storage.get(obj['plan_type'])

    def get_features(self, obj):
        features = {
            'basic': ['5GB Storage', 'Basic Support', 'Standard Processing'],
            'premium': ['20GB Storage', 'Priority Support', 'Fast Processing'],
            'enterprise': ['50GB Storage', '24/7 Support', 'Fastest Processing']
        }
        return features.get(obj['plan_type'])

class SubscriptionSerializer(serializers.ModelSerializer):
    plan_name = serializers.SerializerMethodField()
    storage_limit = serializers.SerializerMethodField()

    class Meta:
        model = Subscription
        fields = [
            'id', 'plan', 'plan_name', 'status', 'created_at', 
            'valid_till', 'storage_limit', 'razorpay_order_id'
        ]
        read_only_fields = ['razorpay_order_id', 'status', 'valid_till']

    def get_plan_name(self, obj):
        return dict(Subscription.PLAN_CHOICES)[obj.plan]

    def get_storage_limit(self, obj):
        limits = {
            'basic': 5 * 1024 * 1024 * 1024,  # 5GB
            'premium': 20 * 1024 * 1024 * 1024,  # 20GB
            'enterprise': 50 * 1024 * 1024 * 1024  # 50GB
        }
        return limits.get(obj.plan)

class PaymentTransactionSerializer(serializers.ModelSerializer):
    class Meta:
        model = PaymentTransaction
        fields = ['id', 'amount', 'currency', 'status', 'created_at']
        read_only_fields = ['status', 'created_at']

class RazorpayOrderSerializer(serializers.Serializer):
    order_id = serializers.CharField()
    amount = serializers.IntegerField()
    currency = serializers.CharField()
    subscription_id = serializers.IntegerField()

class PaymentVerificationSerializer(serializers.Serializer):
    razorpay_payment_id = serializers.CharField()
    razorpay_order_id = serializers.CharField()
    razorpay_signature = serializers.CharField()

================
File: tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: urls.py
================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

router = DefaultRouter()
router.register(r'subscriptions', views.SubscriptionViewSet, basename='subscription')
router.register(r'transactions', views.PaymentTransactionViewSet, basename='transaction')

urlpatterns = [
    path('api/', include(router.urls)),
    path('api/verify-payment/', views.verify_payment, name='verify_payment'),
    path('plans/', views.get_subscription_plans, name='subscription_plans'),
    path('subscribe/<str:plan_type>/', views.create_subscription, name='create_subscription'),
    path('payment/callback/', views.payment_callback, name='payment_callback'),
    path('api/mobile/plans/', views.mobile_subscription_plans, name='mobile_subscription_plans'),
    path('api/mobile/subscribe/', views.mobile_create_subscription, name='mobile_create_subscription'),
    
]

================
File: views.py
================
import razorpay
from django.conf import settings
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
from django.shortcuts import render, redirect
from django.urls import reverse
from django.utils import timezone
from datetime import datetime, timedelta
from .models import Subscription, PaymentTransaction
from .serializers import (
    SubscriptionPlanSerializer, SubscriptionSerializer,
    PaymentTransactionSerializer, RazorpayOrderSerializer,
    PaymentVerificationSerializer
)
from rest_framework import viewsets, status
from rest_framework.decorators import api_view, permission_classes, action
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from django.utils.decorators import method_decorator
client = razorpay.Client(auth=(settings.RAZORPAY_KEY_ID, settings.RAZORPAY_KEY_SECRET))

def get_subscription_plans(request):
    plans = {
        'basic': {
            'name': 'Basic Plan',
            'storage': '5GB',
            'price': 499,
            'features': ['5GB Storage', 'Basic Support', 'Standard Processing']
        },
        'premium': {
            'name': 'Premium Plan',
            'storage': '20GB',
            'price': 999,
            'features': ['20GB Storage', 'Priority Support', 'Fast Processing']
        },
        'enterprise': {
            'name': 'Enterprise Plan',
            'storage': '50GB',
            'price': 1999,
            'features': ['50GB Storage', '24/7 Support', 'Fastest Processing']
        }
    }
    return render(request, 'plans/subscription_plans.html', {'plans': plans})

def create_subscription(request, plan_type):
    if not request.user.is_authenticated:
        return redirect('login')

    plans = {
        'basic': 499,
        'premium': 999,
        'enterprise': 1999
    }

    amount = plans.get(plan_type, 499) * 100  # Convert to paise

    # Create Razorpay Order
    order_data = {
        'amount': amount,
        'currency': 'INR',
        'receipt': f'order_rcptid_{datetime.now().timestamp()}',
        'notes': {
            'plan_type': plan_type,
            'user_email': request.user.email
        }
    }

    order = client.order.create(data=order_data)

    # Create subscription record
    subscription = Subscription.objects.create(
        user=request.user,
        plan=plan_type,
        razorpay_order_id=order['id'],
        status='pending'
    )

    # Create payment transaction record
    PaymentTransaction.objects.create(
        subscription=subscription,
        amount=amount/100,  # Convert back to rupees
        status='pending'
    )

    context = {
        'order_id': order['id'],
        'amount': amount,
        'currency': 'INR',
        'razorpay_key': settings.RAZORPAY_KEY_ID,
        'user_email': request.user.email,
        'callback_url': request.build_absolute_uri(reverse('payment_callback'))
    }

    return render(request, 'plans/checkout.html', context)

@csrf_exempt
def payment_callback(request):
    if request.method == "POST":
        payment_id = request.POST.get('razorpay_payment_id', '')
        order_id = request.POST.get('razorpay_order_id', '')
        signature = request.POST.get('razorpay_signature', '')

        # Verify payment signature
        try:
            client.utility.verify_payment_signature({
                'razorpay_payment_id': payment_id,
                'razorpay_order_id': order_id,
                'razorpay_signature': signature
            })

            # Update subscription and payment status
            subscription = Subscription.objects.get(razorpay_order_id=order_id)
            subscription.razorpay_payment_id = payment_id
            subscription.razorpay_signature = signature
            subscription.status = 'active'
            subscription.valid_till = datetime.now() + timedelta(days=30)
            subscription.save()

            # Update payment transaction
            transaction = PaymentTransaction.objects.get(subscription=subscription)
            transaction.status = 'completed'
            transaction.save()

            return JsonResponse({'status': 'success'})

        except Exception as e:
            return JsonResponse({'status': 'failed', 'error': str(e)})

    return JsonResponse({'status': 'invalid request'})



class SubscriptionViewSet(viewsets.ModelViewSet):
    @method_decorator(csrf_exempt)
    def dispatch(self, request, *args, **kwargs):
        return super().dispatch(request, *args, **kwargs)
    permission_classes = [IsAuthenticated]
    serializer_class = SubscriptionSerializer

    def get_queryset(self):
        return Subscription.objects.filter(user=self.request.user)

    @action(detail=False, methods=['get'])
    def plans(self, request):
        plans = [
            {'plan_type': 'basic'},
            {'plan_type': 'premium'},
            {'plan_type': 'enterprise'}
        ]
        serializer = SubscriptionPlanSerializer(plans, many=True)
        return Response(serializer.data)

    @action(detail=False, methods=['get'])
    def current(self, request):
        subscription = Subscription.objects.filter(
            user=request.user,
            status='active'
        ).first()
        if subscription:
            serializer = self.get_serializer(subscription)
            return Response(serializer.data)
        return Response({'message': 'No active subscription'}, 
                       status=status.HTTP_404_NOT_FOUND)

    @action(detail=False, methods=['post'])
    def create_order(self, request):
        plan_type = request.data.get('plan_type')
        if not plan_type:
            return Response({'error': 'Plan type is required'}, 
                          status=status.HTTP_400_BAD_REQUEST)

        prices = {
            'basic': 499,
            'premium': 999,
            'enterprise': 1999
        }
        amount = prices.get(plan_type)
        if not amount:
            return Response({'error': 'Invalid plan type'}, 
                          status=status.HTTP_400_BAD_REQUEST)

        # Create Razorpay Order
        order_data = {
            'amount': amount * 100,  # Convert to paise
            'currency': 'INR',
            'receipt': f'order_rcptid_{timezone.now().timestamp()}',
            'notes': {
                'plan_type': plan_type,
                'user_email': request.user.email
            }
        }

        try:
            order = client.order.create(data=order_data)

            # Create subscription record
            subscription = Subscription.objects.create(
                user=request.user,
                plan=plan_type,
                razorpay_order_id=order['id'],
                status='pending'
            )

            # Create payment transaction record
            PaymentTransaction.objects.create(
                subscription=subscription,
                amount=amount,
                status='pending'
            )

            response_data = {
                'order_id': order['id'],
                'amount': order['amount'],
                'currency': order['currency'],
                'subscription_id': subscription.id
            }
            serializer = RazorpayOrderSerializer(response_data)
            return Response(serializer.data)

        except Exception as e:
            return Response({'error': str(e)}, 
                          status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@csrf_exempt
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def verify_payment(request):
    serializer = PaymentVerificationSerializer(data=request.data)
    if serializer.is_valid():
        try:
            # Verify payment signature
            params_dict = {
                'razorpay_payment_id': serializer.validated_data['razorpay_payment_id'],
                'razorpay_order_id': serializer.validated_data['razorpay_order_id'],
                'razorpay_signature': serializer.validated_data['razorpay_signature']
            }
            client.utility.verify_payment_signature(params_dict)

            # Update subscription and payment status
            subscription = Subscription.objects.get(
                razorpay_order_id=serializer.validated_data['razorpay_order_id']
            )
            subscription.razorpay_payment_id = serializer.validated_data['razorpay_payment_id']
            subscription.razorpay_signature = serializer.validated_data['razorpay_signature']
            subscription.status = 'active'
            subscription.valid_till = timezone.now() + timedelta(days=30)
            subscription.save()

            # Update payment transaction
            transaction = PaymentTransaction.objects.get(subscription=subscription)
            transaction.status = 'completed'
            transaction.save()

            return Response({
                'message': 'Payment verified successfully',
                'subscription': SubscriptionSerializer(subscription).data
            })

        except Exception as e:
            return Response({'error': str(e)}, 
                          status=status.HTTP_400_BAD_REQUEST)

    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class PaymentTransactionViewSet(viewsets.ReadOnlyModelViewSet):
    permission_classes = [IsAuthenticated]
    serializer_class = PaymentTransactionSerializer

    def get_queryset(self):
        return PaymentTransaction.objects.filter(
            subscription__user=self.request.user
        )
    

@csrf_exempt
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def mobile_subscription_plans(request):
    plans = [
        {
            'plan_type': 'basic',
            'name': 'Basic Plan',
            'storage': '5GB',
            'price': 499,
            'features': ['5GB Storage', 'Basic Support', 'Standard Processing']
        },
        {
            'plan_type': 'premium',
            'name': 'Premium Plan',
            'storage': '20GB',
            'price': 999,
            'features': ['20GB Storage', 'Priority Support', 'Fast Processing']
        },
        {
            'plan_type': 'enterprise',
            'name': 'Enterprise Plan',
            'storage': '50GB',
            'price': 1999,
            'features': ['50GB Storage', '24/7 Support', 'Fastest Processing']
        }
    ]
    
    return Response(plans)

@csrf_exempt
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def mobile_create_subscription(request):
    plan_type = request.data.get('plan_type')
    
    if not plan_type:
        return Response({
            'success': False,
            'error': 'Plan type is required'
        }, status=status.HTTP_400_BAD_REQUEST)
    
    plans = {
        'basic': 499,
        'premium': 999,
        'enterprise': 1999
    }

    amount = plans.get(plan_type, 499) * 100  # Convert to paise

    # Create Razorpay Order
    order_data = {
        'amount': amount,
        'currency': 'INR',
        'receipt': f'order_rcptid_{datetime.now().timestamp()}',
        'notes': {
            'plan_type': plan_type,
            'user_email': request.user.email
        }
    }

    try:
        order = client.order.create(data=order_data)
        
        # Create subscription record
        subscription = Subscription.objects.create(
            user=request.user,
            plan=plan_type,
            razorpay_order_id=order['id'],
            status='pending'
        )

        # Create payment transaction record
        PaymentTransaction.objects.create(
            subscription=subscription,
            amount=amount/100,  # Convert back to rupees
            status='pending'
        )

        return Response({
            'success': True,
            'order_id': order['id'],
            'amount': amount,
            'currency': 'INR',
            'key_id': settings.RAZORPAY_KEY_ID,
            'subscription_id': subscription.id
        })
    except Exception as e:
        return Response({
            'success': False,
            'error': str(e)
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
